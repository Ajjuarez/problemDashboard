doctype html
html(lang='en')
  //
    Problem List Dashboard
    Ajjuarez 
    1/23/2020
  head
    meta(charset='utf-8')
    // Page title
    title Advanced View
    meta(http-http-equiv='x-ua-compatible', content='ie-edge')
    meta(name='viewport', content='width=device-width,initial-scale=1, shrink-to-fit=no')
    //
      Animate CSS - https://daneden.github.io/animate.css/
    link(rel='stylesheet', href='css/animate.css')
    //
      Google Fonts - https://fonts.google.com/
    link(href='https://fonts.googleapis.com/css?family=Roboto&display=swap', rel='stylesheet')
    //
      Font Awesome Icons - https://fontawesome.com/
    script(defer='', src='https://use.fontawesome.com/releases/v5.8.1/js/all.js', integrity='sha384-g5uSoOSBd7KkhAMlnQILrecXvzst9TdC09/VM+pjDTCM+1il8RHz5fKANTFFb+gQ', crossorigin='anonymous')
    //
      Favicons - https://www.favicon-generator.org/
    link(rel='apple-touch-icon', sizes='180x180', href='favicons/apple-touch-icon.png')
    link(rel='icon', type='image/png', sizes='32x32', href='favicons/favicon-32x32.png')
    link(rel='icon', type='image/png', sizes='16x16', href='favicons/favicon-16x16.png')
    link(rel='manifest', href='favicons/site.webmanifest')
    // jquery
    script(src='https://code.jquery.com/jquery-3.2.1.min.js')
    // Chart JAVASCRIPT
    script(src='https://cdn.jsdelivr.net/npm/chart.js@2.8.0')
    // Style Sheets
    link(rel='stylesheet', href='css/normalize.css')
    link(rel='stylesheet', href='css/styles.css')
    //if lte IE 9
      p.browserupgrade
        | You are using an 
        strong outdated
        |  browser. Please 
        a(href='https://browsehappy.com/') upgrade your browser
        |  to improve your experience and security.
  body
    // Header
    header(role='banner')
      .container
        // Logo
        .logo
          a.logo(href='https://www.regenstrief.org/')
            img(src='images/logo.png', alt='Regenstrief Logo')
          h1.sr-only Regenstrief Institute Center for Biometical Informatics
    // White background
    .whitespace
      //
        container that constrains size of interface,
        needed so interface can fill the space it is put in
      .container
        // Interface Design begins here, everything needed for the design structure resides here:
        section.interface
          // Search and display options at the top of the interface
          #butOptions.optionBar
            // Search bar
            #defaultOpen.searchContainer
              .searchbox
                // ICD-10 Search Bar - https://clinicaltables.nlm.nih.gov/apidoc/icd10cm/v3/doc.html
                link(href='https://clinicaltables.nlm.nih.gov/autocomplete-lhc-versions/17.0.2/autocomplete-lhc.min.css', rel='stylesheet')
                // link to stylesheet to override some of the clinical tables styles
                link(rel='stylesheet', href='css/stylesSearch.css')
                script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js')
                script(src='https://clinicaltables.nlm.nih.gov/autocomplete-lhc-versions/17.0.2/autocomplete-lhc.min.js')
                // Make this a form at some point- discuss with eric
                form(action='addCondition.cgi', method='post')
                  input#icd10.search(type='search', placeholder='Find Condition', name='form-addCondition')
                  input(type='submit', value='Add')
            // options for screen display
            .displayOptions
              // group by system
              button(onclick='#')
                span.butIcon(style='font-size: .9rem;')
                  i.far.fa-chart-bar
                |  Group by System
              // display as lists
              button(onclick='#')
                span.butIcon(style='font-size: .8rem;')
                  i.fas.fa-th-list
                |  Display Data as Lists
            // hamburger menu for small screens
            a.icon(href='javascript:void(0);', onclick='menuSmall()')
              i.fa.fa-bars
          // "Problem" tab 1 content
          #Problems.tabcontent
            // div containing accordion buttons
            .problemItems
              // Accordion BUTTON 1 (Cluster 1)
              button#accordionDis.accordion
                // BUTTON 1 LABEL
                span {Problem} Cluster ({NumOfClusters})  
                // drs signature for top textarea
                .signatureLabel
                  | Last Modified: {Date} by {User}
              // Accordion PANEL 1 (PROBLEM 1)
              .panel
                // Main text area in Congestive Heart Failure
                .panelOne
                  .panelNoteArea2
                    span#myText
                    .text
                      textarea#maintextArea1.notespace2(rows='4', onchange='changeToChecked(this.value, iamcheckboxA);')
                        | Patient with long-standing hyperlipidemia and DM2, now with CKD stage III and MI in 2018. Currently on beta-blockers, diuretics
                // CheckBoxes for top text area
                .checkBoxes
                  .checkBoxContainer
                    input(type='checkbox', name='iamcheckbox2')
                    label(for='iamcheckbox2') Chronic
                  .checkBoxContainer
                    input#iamcheckboxA(type='checkbox', name='iamcheckbox')
                    label(for='iamcheckbox') Addressed in this Visit
                // DISCHARGE NOTE	for Congestive Heart Failure
                // section 3 of panel 1
                // Label for section 3 of panel 1
                .noteLabels.noteLabels2
                  .noteLabel
                    .labelActual
                      | Discharge Note    
                      span.dates
                        span.indivDate.open 01/13/14 
                // note area for section 3 of panel 1
                .panelOne
                  .panelNoteArea1
                    .textArea2
                      .textSpace2
                        .docNotes
                          // First displayed in note
                          | Patient Name: Betty Franks
                          br
                          | 															Medical Record Number: 999999999
                          br
                          | 															Admission Date: 7/26/2018
                          br
                          | 															Discharge Date: 7/31/2018
                          span#dots2 ...
                          #more2
                            // Shown when clicked more
                            br
                            | 															Attending Physician: Dr. Somgai
                            br
                            | 															Primary Care Physician: Dr. Mitchell
                            br
                            | 															Consulting Physicians: Dr. Goodman, Nephrology, Dr. Halakis, Cardiology
                            br
                            | 															Condition on discharge: stable
                            br
                            | 															Final Diagnosis: Atherosclerotic Heart Disease with Acute Ischemia of the Left Anterior Coronary Artery
                            br
                            | 															Procedure: Left coronary catheterization with drug eluting stent placement
                            br
                            | 															Hospital Course:
                            | 															71 year old white female presented with acute left jaw pain.  EKG demonstrated STEMI in the anterior wall.  Patient treated per protocol and admitted to the general floor.  Cardiology and nephrology were consulted (due to GFR  less than 65). Patient gradually improved and catheterization performed on day 2 of hospitalization.  Patient was started on Plavix 75mg and aspirin 81mg and otherwise continued on home medications.  Patient was discharged on day 5 on room air.
                            br
                            | 															Discharge Instructions:
                            | 															Follow up with primary care physician in one month.  Follow up with nephrology and cardiology as scheduled.  Regular diet.  Activity as tolerated but instructed to avoid exertion.
                        // more expand button2 for Congestive Heart Failure Discharge note
                        button#myBtn2.readMore(onclick='expandWordsFunction2(dots2, more2, myBtn2);')
                          i.fas.fa-chevron-right
                // STRESS ECHO for Congestive Heart Failure
                // section 4 of panel 1
                // Label for section 4 of panel 1
                .noteLabels.noteLabels2
                  .noteLabel
                    .labelActual
                      | Stress Echo    
                      span.dates
                        span.indivDate.open
                          | 01/13/14 
                          span.tooltip
                            i.far.fa-images
                            span.tooltiptext
                              img#myImg.popupImage(src='images/stress.JPG', alt='Stress Echo')
                // note area for section 4 of panel 1
                .panelOne
                  .panelNoteArea1
                    .textArea2
                      .textSpace2
                        .docNotes
                          // Appears first in the tab
                          | The patient is a pleasant 71-year-old woman with a history of hyperlipidemia, 
                          | diabetes and acute myocardial infarction. She has been referred for an exercise 
                          | echocardiogram.Informed written consent has been obtained from the patient. I 
                          | explained the procedure to her prior to initiation of such. The appropriate time
                          | -out procedure as per Medical Center protocol was performed prior to the procedure 
                          | being begun while the patient was actively participating with appropriate 
                          | dentification of the patient
                          span#dots3 ...
                          #more3
                            // Shown when clicked more
                            | procedure, physician, documentation, position.
                            br
                            | There were no safety concerns noted by staff nor myself.
                            br
                            br
                            | 																	REST ECHO: EF 40%. Reduced mobility of anterior wall.
                            br
                            | 																	EKG shows normal sinus rhythm with mild ST depressions. The patient 
                            | 																	exercised for 4 minutes 30 seconds on a standard Bruce protocol, 
                            | 																	exceeding target heart rate; no angina nor significant ECG changes seen. 
                            | 																	Peak stress echo imaging shows EF of 44%, with reduced mobility of anterior 
                            | 																	wall. Resting blood pressure was within the normal range, and responded 
                            | 																	appropriately to exercise. No dysrhythmias noted.
                            br
                            br
                            | 																	IMPRESSION:
                            br
                            | 																	1. Negative exercise ECG/echocardiogram stress evaluation 
                            | 																	for inducible ischemia in excess of target heart rate.
                            br
                            | 																	2. Reduced ejection fraction likely due to hypokinetic anterior wall.
                            br
                            | 																	3. Appropriate response of blood pressure to exercise.
                            br
                            | 																	These results have been discussed with the patient. Other management 
                            | 																	as per the hospital-based internal medicine service.
                            br
                            | 																	To be clear, there were no complications of this procedure.
                        // more expand button2
                        button#myBtn3.readMore(onclick='expandWordsFunction3(dots3,more3, myBtn3);')
                          i.fas.fa-chevron-right
                // ORDER BUTTON1 for Stress Echo
                .orderdropdown
                  button.ENCbtn Go to Enc
                  button#orderDisable1.orderbtn.popup(onclick='myOrderFunction()')
                    | Order+
                    span#myPopup.popuptext Order Added to Queue!
                // BEGIN GRAPHS BELOW		for Congestive Heart Failure
                .sideByside
                  // graphspace area for section 5 of panel 1
                  .panelOne
                    .panelGraphArea1
                      .graph
                        // GRAPH Anti-Hypertensive
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual Anti-Hypertensive
                          .graphspace
                            canvas#myAntiHypertensiveChart.chart(style='width:100%; height: 100%;')
                        // GRAPH Blood Pressure
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual Blood Pressure
                          .graphspace
                            canvas#myBPChart.chart(style='width:100%; height: 100%;')
                // graphspace area for section 6 of panel 1
                .sideByside
                  .panelOne
                    .panelGraphArea1
                      .graph
                        // GRAPH Diurectic
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual Diuretic
                          .graphspace
                            canvas#myDiureticsChart(style='width:100%; height: 100%;')
                        // GRAPH Weight
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual(title='Weight') Weight
                          .graphspace
                            canvas#myWeightChart.chart(style='width:100%; height: 100%;')
                // graphspace area for section 7 of panel 1
                .sideByside
                  .panelOne
                    .panelGraphArea1
                      .graph
                        // GRAPH Anti-Thrombotic
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual(title='') Anti-Thrombotic
                          .graphspace
                            canvas#myAntiThromboticChart.chart(style='width:100%; height: 100%;')
                        // GRAPH INR
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual INR
                          .graphspace
                            canvas#myINRChart.chart(style='width:100%; height: 100%;')
                // graphspace area for section 8 of panel 1
                .sideByside
                  .panelOne
                    .panelGraphArea1
                      .graph
                        // GRAPH LDL
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual(title='') LDL
                          .graphspace
                            canvas#myLDLChart.chart(style='width:100%; height: 100%;')
                        // GRAPH HDL
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual HDL
                          .graphspace
                            canvas#myHDLChart.chart(style='width:100%; height: 100%;')
                // graphspace area for section 9 of panel 1
                .sideByside
                  .panelOne
                    .panelGraphArea1
                      .graph
                        // GRAPH NT-proBNP
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual(title='') NT-proBNP
                          .graphspace
                            canvas#myBNPChart.chart(style='width:100%; height: 100%;')
                        // GRAPH Creatinine
                        .RL_graph
                          .noteLabels3
                            .noteLabel3
                              .labelActual Creatinine
                          .graphspace
                            canvas#myCretinineChart.chart(style='width:100%; height: 100%;')
                // "more" bottom section panel 1
                .panelOne.bottom
                  .panelNoteArea1
                    .table1
                    .additionalInfo
                      a(href='popup2.html', target='popup', onclick="window.open('popup2.html','popup','width=300,height=200,scrollbars=no,resizable=no'); return false;")
                        | Go to Patient Precision Viewer
              // Accordion BUTTON 2 (PROBLEM 2)
              //
                <button class="accordion" id="accordionDis">
                BUTTON 1 LABEL
                <span>Placeholder&nbsp;&nbsp;</span>
                </button>
              // Accordion PANEL 2 (PROBLEM 2)
              //
                <div class="panel">
                </div>
    // Modal Image view
    // The IMAGEModal
    #myModal.modal
      // The Close Button
      span.close ×
      // Modal Content (The Image)
      img#img01.modal-content
      // Modal Caption (Image Text)
      #caption
    // The sign and save Modal
    // The Modal
    #mySignModal.signmodal
      // Modal content
      .signmodal-content
        span.signclose ×
        span.title Sign and Save Note
        form(action='#')
          input#fname(type='text', name='fname', placeholder='First Last Name', autofocus='')
          input#mysignBtn.button1(type='submit', value='Submit')
    // SCRIPT SECTION SCRIPT SECTION SCRIPT SECTION
    // REGULAR CHARTS HERE
    // SCRIPT SECTION SCRIPT SECTION SCRIPT SECTION
    // REGULAR CHARTS HERE
    // Bloodpressure LINE GRAPH 1
    script.
      var ctx = document.getElementById('myBPChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/7/2018', '2/11/2019', '4/3/2019','5/11/2019','7/18/2019'],
      datasets: [{
      label: 'Systolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [117, 135, 90, 100,106,110]
      },
      {
      label: 'Diastolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'blue',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [65, 74, 61, 74,65,62]
      },
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      suggestedMin: 50,
      stepValue: 50,
      suggestedMax: 150
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  'mmHg'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Bloodpressure LINE GRAPH 2
    script.
      var ctx = document.getElementById('myBPChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/7/2018', '2/11/2019', '4/3/2019','5/11/2019','7/18/2019'],
      datasets: [{
      label: 'Systolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [117, 135, 90, 100,106,110]
      },
      {
      label: 'Diastolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'blue',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [65, 74, 61, 74,65,62]
      },
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      suggestedMin: 50,
      stepValue: 50,
      suggestedMax: 150
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  'mmHg'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Bloodpressure LINE GRAPH 3
    script.
      var ctx = document.getElementById('myBPChart3').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/7/2018', '2/11/2019', '4/3/2019','5/11/2019','7/18/2019'],
      datasets: [{
      label: 'Systolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [117, 135, 90, 100,106,110]
      },
      {
      label: 'Diastolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'blue',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [65, 74, 61, 74,65,62]
      },
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      suggestedMin: 50,
      stepValue: 50,
      suggestedMax: 150
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      label: function(tooltipItem, data) {
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  'mmHg'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Bloodpressure LINE GRAPH
    script.
      var ctx = document.getElementById('myBPChart4').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/7/2018', '2/11/2019', '4/3/2019','5/11/2019','7/18/2019'],
      datasets: [{
      label: 'Systolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [117, 135, 90, 100,106,110]
      },
      {
      label: 'Diastolic',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'blue',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [65, 74, 61, 74,65,62]
      },
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      suggestedMin: 50,
      stepValue: 50,
      suggestedMax: 150
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      label: function(tooltipItem, data) {
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  'mmHg'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Weight LINE GRAPH 1
    script.
      var ctx = document.getElementById('myWeightChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '2/11/2019', '4/03/2019', '05/11/2019','07/18/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [120, 120, 120, 120, 124, 132]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [125, 125, 125, 125, 125,125]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100, 100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      min:99,
      max:133
      // suggestedMin: 70,
      // stepValue:,
      // suggestedMax: 200
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs';
      }
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==125){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Weight LINE GRAPH 2
    script.
      var ctx = document.getElementById('myWeightChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '2/11/2019', '4/03/2019', '05/11/2019','07/18/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [120, 120, 120, 120, 124, 132]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [125, 125, 125, 125, 125,125]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100, 100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      min:99,
      max:133
      // suggestedMin: 70,
      // stepValue:,
      // suggestedMax: 200
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs';
      }
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==125){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Weight LINE GRAPH 3
    script.
      var ctx = document.getElementById('myWeightChart3').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '2/11/2019', '4/03/2019', '05/11/2019','07/18/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [120, 120, 120, 120, 124, 132]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [125, 125, 125, 125, 125,125]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100, 100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      min:99,
      max:133
      // suggestedMin: 70,
      // stepValue:,
      // suggestedMax: 200
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs';
      }
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==125){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'lbs'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // INR LINE GRAPH 1
    script.
      var ctx = document.getElementById('myINRChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '2/11/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.23, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      suggestedMax: 1.5
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // INR LINE GRAPH 2
    script.
      var ctx = document.getElementById('myINRChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '2/11/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.23, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      suggestedMax: 1.5
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // INR LINE GRAPH 3
    script.
      var ctx = document.getElementById('myINRChart3').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '2/11/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.23, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      suggestedMax: 1.5
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+  '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // LDL LINE GRAPH1
    script.
      var ctx = document.getElementById('myLDLChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [220, 170, 168]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // LDL LINE GRAPH 2
    script.
      var ctx = document.getElementById('myLDLChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [220, 170, 168]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // LDL LINE GRAPH3
    script.
      var ctx = document.getElementById('myLDLChart3').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [220, 170, 168]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // LDL LINE GRAPH4
    script.
      var ctx = document.getElementById('myLDLChart4').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [220, 170, 168]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // LDL LINE GRAPH5
    script.
      var ctx = document.getElementById('myLDLChart5').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [220, 170, 168]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [100, 100, 100]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==100){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // HDL LINE GRAPH 1
    script.
      var ctx = document.getElementById('myHDLChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [35, 36, 32]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [50, 50, 50]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==50){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // HDL LINE GRAPH 2
    script.
      var ctx = document.getElementById('myHDLChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [35, 36, 32]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [50, 50, 50]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==50){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // HDL LINE GRAPH 3
    script.
      var ctx = document.getElementById('myHDLChart3').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [35, 36, 32]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [50, 50, 50]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==50){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // HDL LINE GRAPH 4
    script.
      var ctx = document.getElementById('myHDLChart4').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [35, 36, 32]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [50, 50, 50]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==50){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // HDL LINE GRAPH 5
    script.
      var ctx = document.getElementById('myHDLChart5').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['11/07/2018', '2/11/2019', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [35, 36, 32]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [50, 50, 50]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 50,
      // stepValue: 100,
      // suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==50){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // NT PRO BNP LINE GRAPH 1
    script.
      var ctx = document.getElementById('myBNPChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '02/11/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [753, 450, 441]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [300, 300, 300]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      suggestedMin: 50,
      stepValue: 100,
      suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==300){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'ml/pl';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'ml/pL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // NT PRO BNP LINE GRAPH 2
    script.
      var ctx = document.getElementById('myBNPChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '02/11/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [753, 450, 441]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [300, 300, 300]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      suggestedMin: 50,
      stepValue: 100,
      suggestedMax: 400
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==300){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'ml/pl';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'ml/pL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Creatinine LINE GRAPH 1
    script.
      var ctx = document.getElementById('myCretinineChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.4, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 0,
      // // stepValue: ,
      // suggestedMax: 3,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + ' mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+'  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Creatinine LINE GRAPH 2
    script.
      var ctx = document.getElementById('myCretinineChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.4, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 0,
      // // stepValue: ,
      // suggestedMax: 3,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + ' mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+'  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Creatinine LINE GRAPH3
    script.
      var ctx = document.getElementById('myCretinineChart3').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.4, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 0,
      // // stepValue: ,
      // suggestedMax: 3,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + ' mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+'  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Creatinine LINE GRAPH 4
    script.
      var ctx = document.getElementById('myCretinineChart4').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [1.4, 1.3, 1.3]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [1.1, 1.1, 1.1]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      // suggestedMin: 0,
      // // stepValue: ,
      // suggestedMax: 3,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==1.1){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + ' mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+'  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Hemoglobin LINE GRAPH 1
    script.
      var ctx = document.getElementById('myHemoglobinChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/7/2018','07/18/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [9.7, 8.3,6.5]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [6.5, 6.5,6.5]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      //
      // suggestedMin: 5,
      // stepValue: 4,
      // suggestedMax: 10,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==6.5){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +'%';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ '%'+ '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Hemoglobin LINE GRAPH 2
    script.
      var ctx = document.getElementById('myHemoglobinChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/7/2018','07/18/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [9.7, 8.3,6.5]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [6.5, 6.5,6.5]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      //
      // suggestedMin: 5,
      // stepValue: 4,
      // suggestedMax: 10,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==6.5){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +'%';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ '%'+ '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // GFR LINE GRAPH
    script.
      var ctx = document.getElementById('myGFRChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [41, 44, 43]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [65, 65, 65]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      //
      // suggestedMin: 5,
      // stepValue: 4,
      // suggestedMax: 10,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==65){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +'m';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'm'+ '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // GFR LINE GRAPH 2
    script.
      var ctx = document.getElementById('myGFRChart2').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [41, 44, 43]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [65, 65, 65]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      //
      // suggestedMin: 5,
      // stepValue: 4,
      // suggestedMax: 10,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==65){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +'m';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'm'+ '  ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // GLUCOSE LINE GRAPH
    script.
      var ctx = document.getElementById('myGlocoseChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018','09/14/2018', '11/7/2018','02/11/2019','03/24/2019','04/03/2019','05/11/2019','06/17/2019','07/18/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [214, 121,135,90,88,79,85,75,72]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [79, 79,79,79,79,79,79,79,79]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [160, 160,160,160,160,160,160,160,160]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false,
      min: 71,
      max: 215
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==160){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==79){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mg/dL'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // Potassium LINE GRAPH
    script.
      var ctx = document.getElementById('myPotassiumChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['7/31/2018', '11/07/2018', '04/03/2019'],
      datasets: [{
      label: 'ml/PL',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'grey',
      pointRadius: '3',
      pointHoverRadius: '3',
      pointHoverBackgroundColor: 'white',
      borderWidth: '1',
      data: [3.7, 3.8, 3.9]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [3.5, 3.5, 3.5]
      },
      {     label: '',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(149, 165, 166, 1)',
      borderDash: [2,2],
      pointBackgroundColor: 'black',
      pointRadius: '0',
      pointHoverRadius: '0',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [5, 5, 5]
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false,
      }
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{
      display:false,
      // min: 3.4,
      // max: 5.1,
      }
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //changes here!
      label: function(tooltipItem, data) {
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==3.5){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mEq/L';
      }
      if(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]==5){
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mEq/L';
      }
      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]+ 'mEq/L'+ ' ' + data.labels[tooltipItem.index];
      }
      },
      },
      }
      });
    // MEDICATION CHARTS BELOW
    // ANTIHYPERTENSIVE Medication graph 1
    script.
      var ctx = document.getElementById('myAntiHypertensiveChart').getContext('2d');
      var chart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'line',
      // The data for our dataset
      data: {
      labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
      dataForMetro:["25","25","25","25"],
      dataForCar:[ , , , , "25", "25", "25", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"],
      dataForLis:[, , , , , , , "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5"],
      dataForAm:["10", "10", "10", "10", "10", "10", "10", "10", "10"],
      dataForVera:[, , , , , , , , ,"180", "180", "180", "180", "180"],
      datasets: [{
      label: 'Metoprolol',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      // pointBorderWidth: '1',
      borderColor: 'rgba(0,0,0,0)',
      pointBackgroundColor: 'black',
      pointRadius: '4',
      pointHoverRadius: '5',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [10,10,10,10,,,,,,,,,,,],
      pointStyle: 'rectRot',
      },
      {
      label: 'Carvedilol',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,0)',
      pointBorderColor: "black",
      pointBorderWidth: '1',
      pointBackgroundColor: "black",
      pointRadius: '4',
      pointHoverRadius: '5',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [,,,,10,10,10,1,1,1,1,1,1,1,1],
      pointStyle: 'rect',
      },
      {
      label: 'Lisinopril',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,0)',
      pointBorderColor: "#23AEDF",
      // pointBorderWidth: '1',
      pointBackgroundColor: "#23AEDF",
      pointRadius: '4',
      pointHoverRadius: '5',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [,,,,,,,50,50,50,50,50,50,50,50],
      // pointStyle: 'rectRounded',
      pointHoverBorderWidth: '2',
      pointStyle: 'rectRot',
      },
      {
      label: 'Amlodipine',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,0)',
      pointBorderColor: "#2350DF",
      // pointBorderWidth: '1',
      pointBackgroundColor: "#2350DF",
      pointRadius: '4',
      pointHoverRadius: '5',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [30,30,30,30,30,30,30,30,30,,,,,,],
      pointHoverBorderWidth: '2',
      pointStyle: 'rectRot',
      },
      {
      label: 'Verapamil',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderColor: 'rgba(0,0,0,0)',
      pointBorderColor: "#2350DF",
      // pointBorderWidth: '1',
      pointBackgroundColor: "#2350DF",
      pointRadius: '4',
      pointHoverRadius: '5',
      pointHoverBackgroundColor: 'black',
      borderWidth: '1',
      data: [,,,,,,,,,30,30,30,30,30,30],
      pointStyle: 'rect',
      pointHoverBorderWidth: '2',
      }
      ]
      },
      // Configuration options go here
      options: {
      responsive:true,
      maintainAspectRatio: false,
      legend: {display: false},
      scales: {
      xAxes: [{
      gridLines: {
      display: false,
      drawBorder: false,
      },
      ticks:{display:false}
      }],
      yAxes: [{
      gridLines: {
      display: false,
      drawBorder:false,
      },
      ticks:{display:false}
      }]
      },
      layout: {
      padding: {
      left: 0,
      right: 10,
      top: 10,
      bottom: 0
      }
      },
      tooltips: {
      displayColors: false,
      caretSize: 5,
      bodyFontSize: 11,
      callbacks: {
      title: function() {},
      //Changes here!
      label: function(tooltipItem, data) {
      if(data.labels[tooltipItem.index]=="N/A"){
      return "Period Not Covered";
      }
      if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="#23AEDF"){
      return data.datasets[2].label+ " " + data.dataForLis[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
      }
      if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="black") {
      if( data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
      return data.datasets[0].label+ " " + data.dataForMetro[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
      }
      if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
      return data.datasets[1].label+ " " + data.dataForCar[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
      }
      }
      if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="#2350DF"){
      if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
      return data.datasets[3].label+ " " + data.dataForAm[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
      }
      return data.datasets[4].label+ " " + data.dataForVera[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
      }
      },
      },
      } }
      });
      //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
      // ANTIHYPERTENSIVE Medication graph 2
      script.
        var ctx = document.getElementById('myAntiHypertensiveChart2').getContext('2d');
        var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'line',
        // The data for our dataset
        data: {
        labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
        dataForMetro:["25","25","25","25"],
        dataForCar:[ , , , , "25", "25", "25", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"],
        dataForLis:[, , , , , , , "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5"],
        dataForAm:["10", "10", "10", "10", "10", "10", "10", "10", "10"],
        dataForVera:[, , , , , , , , ,"180", "180", "180", "180", "180"],
        datasets: [{
        label: 'Metoprolol',
        backgroundColor: 'rgba(0, 0, 0, 0)',
        // pointBorderWidth: '1',
        borderColor: 'rgba(0,0,0,0)',
        pointBackgroundColor: 'black',
        pointRadius: '4',
        pointHoverRadius: '5',
        pointHoverBackgroundColor: 'black',
        borderWidth: '1',
        data: [10,10,10,10,,,,,,,,,,,],
        pointStyle: 'rectRot',
        },
        {
        label: 'Carvedilol',
        backgroundColor: 'rgba(0, 0, 0, 0)',
        borderColor: 'rgba(0,0,0,0)',
        pointBorderColor: "black",
        pointBorderWidth: '1',
        pointBackgroundColor: "black",
        pointRadius: '4',
        pointHoverRadius: '5',
        pointHoverBackgroundColor: 'black',
        borderWidth: '1',
        data: [,,,,10,10,10,1,1,1,1,1,1,1,1],
        pointStyle: 'rect',
        },
        {
        label: 'Lisinopril',
        backgroundColor: 'rgba(0, 0, 0, 0)',
        borderColor: 'rgba(0,0,0,0)',
        pointBorderColor: "#23AEDF",
        // pointBorderWidth: '1',
        pointBackgroundColor: "#23AEDF",
        pointRadius: '4',
        pointHoverRadius: '5',
        pointHoverBackgroundColor: 'black',
        borderWidth: '1',
        data: [,,,,,,,50,50,50,50,50,50,50,50],
        // pointStyle: 'rectRounded',
        pointHoverBorderWidth: '2',
        pointStyle: 'rectRot',
        },
        {
        label: 'Amlodipine',
        backgroundColor: 'rgba(0, 0, 0, 0)',
        borderColor: 'rgba(0,0,0,0)',
        pointBorderColor: "#2350DF",
        // pointBorderWidth: '1',
        pointBackgroundColor: "#2350DF",
        pointRadius: '4',
        pointHoverRadius: '5',
        pointHoverBackgroundColor: 'black',
        borderWidth: '1',
        data: [30,30,30,30,30,30,30,30,30,,,,,,],
        pointHoverBorderWidth: '2',
        pointStyle: 'rectRot',
        },
        {
        label: 'Verapamil',
        backgroundColor: 'rgba(0, 0, 0, 0)',
        borderColor: 'rgba(0,0,0,0)',
        pointBorderColor: "#2350DF",
        // pointBorderWidth: '1',
        pointBackgroundColor: "#2350DF",
        pointRadius: '4',
        pointHoverRadius: '5',
        pointHoverBackgroundColor: 'black',
        borderWidth: '1',
        data: [,,,,,,,,,30,30,30,30,30,30],
        pointStyle: 'rect',
        pointHoverBorderWidth: '2',
        }
        ]
        },
        // Configuration options go here
        options: {
        responsive:true,
        maintainAspectRatio: false,
        legend: {display: false},
        scales: {
        xAxes: [{
        gridLines: {
        display: false,
        drawBorder: false,
        },
        ticks:{display:false}
        }],
        yAxes: [{
        gridLines: {
        display: false,
        drawBorder:false,
        },
        ticks:{display:false}
        }]
        },
        layout: {
        padding: {
        left: 0,
        right: 10,
        top: 10,
        bottom: 0
        }
        },
        tooltips: {
        displayColors: false,
        caretSize: 5,
        bodyFontSize: 11,
        callbacks: {
        title: function() {},
        //Changes here!
        label: function(tooltipItem, data) {
        if(data.labels[tooltipItem.index]=="N/A"){
        return "Period Not Covered";
        }
        if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="#23AEDF"){
        return data.datasets[2].label+ " " + data.dataForLis[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
        }
        if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="black") {
        if( data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
        return data.datasets[0].label+ " " + data.dataForMetro[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
        }
        if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
        return data.datasets[1].label+ " " + data.dataForCar[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
        }
        }
        if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="#2350DF"){
        if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
        return data.datasets[3].label+ " " + data.dataForAm[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
        }
        return data.datasets[4].label+ " " + data.dataForVera[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
        }
        },
        },
        } }
        });
        //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
        // ANTIHYPERTENSIVE Medication graph 3
        script.
          var ctx = document.getElementById('myAntiHypertensiveChart3').getContext('2d');
          var chart = new Chart(ctx, {
          // The type of chart we want to create
          type: 'line',
          // The data for our dataset
          data: {
          labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
          dataForMetro:["25","25","25","25"],
          dataForCar:[ , , , , "25", "25", "25", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"],
          dataForLis:[, , , , , , , "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5"],
          dataForAm:["10", "10", "10", "10", "10", "10", "10", "10", "10"],
          dataForVera:[, , , , , , , , ,"180", "180", "180", "180", "180"],
          datasets: [{
          label: 'Metoprolol',
          backgroundColor: 'rgba(0, 0, 0, 0)',
          // pointBorderWidth: '1',
          borderColor: 'rgba(0,0,0,0)',
          pointBackgroundColor: 'black',
          pointRadius: '4',
          pointHoverRadius: '5',
          pointHoverBackgroundColor: 'black',
          borderWidth: '1',
          data: [10,10,10,10,,,,,,,,,,,],
          pointStyle: 'rectRot',
          },
          {
          label: 'Carvedilol',
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: 'rgba(0,0,0,0)',
          pointBorderColor: "black",
          pointBorderWidth: '1',
          pointBackgroundColor: "black",
          pointRadius: '4',
          pointHoverRadius: '5',
          pointHoverBackgroundColor: 'black',
          borderWidth: '1',
          data: [,,,,10,10,10,1,1,1,1,1,1,1,1],
          pointStyle: 'rect',
          },
          {
          label: 'Lisinopril',
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: 'rgba(0,0,0,0)',
          pointBorderColor: "#23AEDF",
          // pointBorderWidth: '1',
          pointBackgroundColor: "#23AEDF",
          pointRadius: '4',
          pointHoverRadius: '5',
          pointHoverBackgroundColor: 'black',
          borderWidth: '1',
          data: [,,,,,,,50,50,50,50,50,50,50,50],
          // pointStyle: 'rectRounded',
          pointHoverBorderWidth: '2',
          pointStyle: 'rectRot',
          },
          {
          label: 'Amlodipine',
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: 'rgba(0,0,0,0)',
          pointBorderColor: "#2350DF",
          // pointBorderWidth: '1',
          pointBackgroundColor: "#2350DF",
          pointRadius: '4',
          pointHoverRadius: '5',
          pointHoverBackgroundColor: 'black',
          borderWidth: '1',
          data: [30,30,30,30,30,30,30,30,30,,,,,,],
          pointHoverBorderWidth: '2',
          pointStyle: 'rectRot',
          },
          {
          label: 'Verapamil',
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: 'rgba(0,0,0,0)',
          pointBorderColor: "#2350DF",
          // pointBorderWidth: '1',
          pointBackgroundColor: "#2350DF",
          pointRadius: '4',
          pointHoverRadius: '5',
          pointHoverBackgroundColor: 'black',
          borderWidth: '1',
          data: [,,,,,,,,,30,30,30,30,30,30],
          pointStyle: 'rect',
          pointHoverBorderWidth: '2',
          }
          ]
          },
          // Configuration options go here
          options: {
          responsive:true,
          maintainAspectRatio: false,
          legend: {display: false},
          scales: {
          xAxes: [{
          gridLines: {
          display: false,
          drawBorder: false,
          },
          ticks:{display:false}
          }],
          yAxes: [{
          gridLines: {
          display: false,
          drawBorder:false,
          },
          ticks:{display:false}
          }]
          },
          layout: {
          padding: {
          left: 0,
          right: 10,
          top: 10,
          bottom: 0
          }
          },
          tooltips: {
          displayColors: false,
          caretSize: 5,
          bodyFontSize: 11,
          callbacks: {
          title: function() {},
          //Changes here!
          label: function(tooltipItem, data) {
          if(data.labels[tooltipItem.index]=="N/A"){
          return "Period Not Covered";
          }
          if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="#23AEDF"){
          return data.datasets[2].label+ " " + data.dataForLis[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
          }
          if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="black") {
          if( data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
          return data.datasets[0].label+ " " + data.dataForMetro[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
          }
          if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
          return data.datasets[1].label+ " " + data.dataForCar[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
          }
          }
          if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="#2350DF"){
          if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
          return data.datasets[3].label+ " " + data.dataForAm[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
          }
          return data.datasets[4].label+ " " + data.dataForVera[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
          }
          },
          },
          } }
          });
          //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
          // ANTIHYPERTENSIVE Medication graph 4
          script.
            var ctx = document.getElementById('myAntiHypertensiveChart4').getContext('2d');
            var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
            labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
            dataForMetro:["25","25","25","25"],
            dataForCar:[ , , , , "25", "25", "25", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"],
            dataForLis:[, , , , , , , "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5", "2.5"],
            dataForAm:["10", "10", "10", "10", "10", "10", "10", "10", "10"],
            dataForVera:[, , , , , , , , ,"180", "180", "180", "180", "180"],
            datasets: [{
            label: 'Metoprolol',
            backgroundColor: 'rgba(0, 0, 0, 0)',
            // pointBorderWidth: '1',
            borderColor: 'rgba(0,0,0,0)',
            pointBackgroundColor: 'black',
            pointRadius: '4',
            pointHoverRadius: '5',
            pointHoverBackgroundColor: 'black',
            borderWidth: '1',
            data: [10,10,10,10,,,,,,,,,,,],
            pointStyle: 'rectRot',
            },
            {
            label: 'Carvedilol',
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(0,0,0,0)',
            pointBorderColor: "black",
            pointBorderWidth: '1',
            pointBackgroundColor: "black",
            pointRadius: '4',
            pointHoverRadius: '5',
            pointHoverBackgroundColor: 'black',
            borderWidth: '1',
            data: [,,,,10,10,10,1,1,1,1,1,1,1,1],
            pointStyle: 'rect',
            },
            {
            label: 'Lisinopril',
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(0,0,0,0)',
            pointBorderColor: "#23AEDF",
            // pointBorderWidth: '1',
            pointBackgroundColor: "#23AEDF",
            pointRadius: '4',
            pointHoverRadius: '5',
            pointHoverBackgroundColor: 'black',
            borderWidth: '1',
            data: [,,,,,,,50,50,50,50,50,50,50,50],
            // pointStyle: 'rectRounded',
            pointHoverBorderWidth: '2',
            pointStyle: 'rectRot',
            },
            {
            label: 'Amlodipine',
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(0,0,0,0)',
            pointBorderColor: "#2350DF",
            // pointBorderWidth: '1',
            pointBackgroundColor: "#2350DF",
            pointRadius: '4',
            pointHoverRadius: '5',
            pointHoverBackgroundColor: 'black',
            borderWidth: '1',
            data: [30,30,30,30,30,30,30,30,30,,,,,,],
            pointHoverBorderWidth: '2',
            pointStyle: 'rectRot',
            },
            {
            label: 'Verapamil',
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(0,0,0,0)',
            pointBorderColor: "#2350DF",
            // pointBorderWidth: '1',
            pointBackgroundColor: "#2350DF",
            pointRadius: '4',
            pointHoverRadius: '5',
            pointHoverBackgroundColor: 'black',
            borderWidth: '1',
            data: [,,,,,,,,,30,30,30,30,30,30],
            pointStyle: 'rect',
            pointHoverBorderWidth: '2',
            }
            ]
            },
            // Configuration options go here
            options: {
            responsive:true,
            maintainAspectRatio: false,
            legend: {display: false},
            scales: {
            xAxes: [{
            gridLines: {
            display: false,
            drawBorder: false,
            },
            ticks:{display:false}
            }],
            yAxes: [{
            gridLines: {
            display: false,
            drawBorder:false,
            },
            ticks:{display:false}
            }]
            },
            layout: {
            padding: {
            left: 0,
            right: 10,
            top: 10,
            bottom: 0
            }
            },
            tooltips: {
            displayColors: false,
            caretSize: 5,
            bodyFontSize: 11,
            callbacks: {
            title: function() {},
            //Changes here!
            label: function(tooltipItem, data) {
            if(data.labels[tooltipItem.index]=="N/A"){
            return "Period Not Covered";
            }
            if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="#23AEDF"){
            return data.datasets[2].label+ " " + data.dataForLis[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
            }
            if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="black") {
            if( data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
            return data.datasets[0].label+ " " + data.dataForMetro[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
            }
            if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
            return data.datasets[1].label+ " " + data.dataForCar[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
            }
            }
            if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="#2350DF"){
            if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
            return data.datasets[3].label+ " " + data.dataForAm[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
            }
            return data.datasets[4].label+ " " + data.dataForVera[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
            }
            },
            },
            } }
            });
            //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
            // Diuretics Medication graph 1
            script.
              var ctx = document.getElementById('myDiureticsChart').getContext('2d');
              var chart = new Chart(ctx, {
              // The type of chart we want to create
              type: 'line',
              // The data for our dataset
              data: {
              labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
              dataAcutal:["25","25","25","25", "25", "25", "25", "25", "40", "40", "40", "40", "40", "40", "40"],
              datasets: [
              {
              label: 'Hydrochlorothiazide',
              backgroundColor: 'rgba(0, 0, 0, 0)',
              borderColor: 'rgba(0,0,0,0)',
              pointBorderColor: "#23AEDF",
              // pointBorderWidth: '1',
              pointBackgroundColor: "#23AEDF",
              pointRadius: '4',
              pointHoverRadius: '5',
              pointHoverBackgroundColor: 'black',
              borderWidth: '1',
              data: [30,30,30,30,30,30,30,30,30,,,,,,],
              pointHoverBorderWidth: '2',
              pointStyle: 'rectRot',
              },
              {
              label: 'Furosemide',
              backgroundColor: 'rgba(0, 0, 0, 0)',
              borderColor: 'rgba(0,0,0,0)',
              pointBorderColor: "#23AEDF",
              // pointBorderWidth: '1',
              pointBackgroundColor: "#23AEDF",
              pointRadius: '4',
              pointHoverRadius: '5',
              pointHoverBackgroundColor: 'black',
              borderWidth: '1',
              data: [,,,,,,,,,30,30,30,30,30,30],
              pointStyle: 'rect',
              pointHoverBorderWidth: '2',
              }
              ]
              },
              // Configuration options go here
              options: {
              responsive:true,
              maintainAspectRatio: false,
              legend: {display: false},
              scales: {
              xAxes: [{
              gridLines: {
              display: false,
              drawBorder: false,
              },
              ticks:{display:false}
              }],
              yAxes: [{
              gridLines: {
              display: false,
              drawBorder:false,
              },
              ticks:{display:false}
              }]
              },
              layout: {
              padding: {
              left: 0,
              right: 10,
              top: 10,
              bottom: 0
              }
              },
              tooltips: {
              displayColors: false,
              caretSize: 5,
              bodyFontSize: 11,
              callbacks: {
              title: function() {},
              //Changes here!
              label: function(tooltipItem, data) {
              if(data.labels[tooltipItem.index]=="N/A"){
              return "Period Not Covered";
              }
              if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
              return data.datasets[0].label + " " + 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
              }
              if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
              return data.datasets[1].label+ " " + 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
              }
              },
              }    },
              }  }
              );
              //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
              // Diuretics Medication graph 2
              script.
                var ctx = document.getElementById('myDiureticsChart2').getContext('2d');
                var chart = new Chart(ctx, {
                // The type of chart we want to create
                type: 'line',
                // The data for our dataset
                data: {
                labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
                dataAcutal:["25","25","25","25", "25", "25", "25", "25", "40", "40", "40", "40", "40", "40", "40"],
                datasets: [
                {
                label: 'Hydrochlorothiazide',
                backgroundColor: 'rgba(0, 0, 0, 0)',
                borderColor: 'rgba(0,0,0,0)',
                pointBorderColor: "#23AEDF",
                // pointBorderWidth: '1',
                pointBackgroundColor: "#23AEDF",
                pointRadius: '4',
                pointHoverRadius: '5',
                pointHoverBackgroundColor: 'black',
                borderWidth: '1',
                data: [30,30,30,30,30,30,30,30,30,,,,,,],
                pointHoverBorderWidth: '2',
                pointStyle: 'rectRot',
                },
                {
                label: 'Furosemide',
                backgroundColor: 'rgba(0, 0, 0, 0)',
                borderColor: 'rgba(0,0,0,0)',
                pointBorderColor: "#23AEDF",
                // pointBorderWidth: '1',
                pointBackgroundColor: "#23AEDF",
                pointRadius: '4',
                pointHoverRadius: '5',
                pointHoverBackgroundColor: 'black',
                borderWidth: '1',
                data: [,,,,,,,,,30,30,30,30,30,30],
                pointStyle: 'rect',
                pointHoverBorderWidth: '2',
                }
                ]
                },
                // Configuration options go here
                options: {
                responsive:true,
                maintainAspectRatio: false,
                legend: {display: false},
                scales: {
                xAxes: [{
                gridLines: {
                display: false,
                drawBorder: false,
                },
                ticks:{display:false}
                }],
                yAxes: [{
                gridLines: {
                display: false,
                drawBorder:false,
                },
                ticks:{display:false}
                }]
                },
                layout: {
                padding: {
                left: 0,
                right: 10,
                top: 10,
                bottom: 0
                }
                },
                tooltips: {
                displayColors: false,
                caretSize: 5,
                bodyFontSize: 11,
                callbacks: {
                title: function() {},
                //Changes here!
                label: function(tooltipItem, data) {
                if(data.labels[tooltipItem.index]=="N/A"){
                return "Period Not Covered";
                }
                if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
                return data.datasets[0].label + " " + 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                }
                if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
                return data.datasets[1].label+ " " + 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                }
                },
                }    },
                }  }
                );
                //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                // Diuretics Medication graph3
                script.
                  var ctx = document.getElementById('myDiureticsChart3').getContext('2d');
                  var chart = new Chart(ctx, {
                  // The type of chart we want to create
                  type: 'line',
                  // The data for our dataset
                  data: {
                  labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019' ],
                  dataAcutal:["25","25","25","25", "25", "25", "25", "25", "40", "40", "40", "40", "40", "40", "40"],
                  datasets: [
                  {
                  label: 'Hydrochlorothiazide',
                  backgroundColor: 'rgba(0, 0, 0, 0)',
                  borderColor: 'rgba(0,0,0,0)',
                  pointBorderColor: "#23AEDF",
                  // pointBorderWidth: '1',
                  pointBackgroundColor: "#23AEDF",
                  pointRadius: '4',
                  pointHoverRadius: '5',
                  pointHoverBackgroundColor: 'black',
                  borderWidth: '1',
                  data: [30,30,30,30,30,30,30,30,30,,,,,,],
                  pointHoverBorderWidth: '2',
                  pointStyle: 'rectRot',
                  },
                  {
                  label: 'Furosemide',
                  backgroundColor: 'rgba(0, 0, 0, 0)',
                  borderColor: 'rgba(0,0,0,0)',
                  pointBorderColor: "#23AEDF",
                  // pointBorderWidth: '1',
                  pointBackgroundColor: "#23AEDF",
                  pointRadius: '4',
                  pointHoverRadius: '5',
                  pointHoverBackgroundColor: 'black',
                  borderWidth: '1',
                  data: [,,,,,,,,,30,30,30,30,30,30],
                  pointStyle: 'rect',
                  pointHoverBorderWidth: '2',
                  }
                  ]
                  },
                  // Configuration options go here
                  options: {
                  responsive:true,
                  maintainAspectRatio: false,
                  legend: {display: false},
                  scales: {
                  xAxes: [{
                  gridLines: {
                  display: false,
                  drawBorder: false,
                  },
                  ticks:{display:false}
                  }],
                  yAxes: [{
                  gridLines: {
                  display: false,
                  drawBorder:false,
                  },
                  ticks:{display:false}
                  }]
                  },
                  layout: {
                  padding: {
                  left: 0,
                  right: 10,
                  top: 10,
                  bottom: 0
                  }
                  },
                  tooltips: {
                  displayColors: false,
                  caretSize: 5,
                  bodyFontSize: 11,
                  callbacks: {
                  title: function() {},
                  //Changes here!
                  label: function(tooltipItem, data) {
                  if(data.labels[tooltipItem.index]=="N/A"){
                  return "Period Not Covered";
                  }
                  if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rectRot"){
                  return data.datasets[0].label + " " + 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                  }
                  if(data.datasets[tooltipItem.datasetIndex].pointStyle=="rect"){
                  return data.datasets[1].label+ " " + 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                  }
                  },
                  }    },
                  }  }
                  );
                  //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                  // ANTI-Thrombotic Medication graph
                  script.
                    var ctx = document.getElementById('myAntiThromboticChart').getContext('2d');
                    var chart = new Chart(ctx, {
                    // The type of chart we want to create
                    type: 'line',
                    // The data for our dataset
                    data: {
                    labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019'],
                    dataAcutal:["12.5","12.5","12.5","12.5", "12.5", "25", "25", "25", "300", "300", "200", "200", "200", "100", "100", "100", "100"],
                    datasets: [{
                    label: 'Pravastatin',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    // pointBorderWidth: '1',
                    borderColor: 'rgba(0,0,0,0)',
                    pointBackgroundColor: 'black',
                    pointRadius: '4',
                    pointHoverRadius: '5',
                    pointHoverBackgroundColor: 'black',
                    borderWidth: '1',
                    data: [10,10,10,10,1,1,1,1,1,1,1,1,1,1,1],
                    pointStyle: 'rectRot',
                    },
                    {
                    label: 'Clopidogrel',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    borderColor: 'rgba(0,0,0,0)',
                    pointBorderColor: "#23AEDF",
                    pointBorderWidth: '1',
                    pointBackgroundColor: "#23AEDF",
                    pointRadius: '4',
                    pointHoverRadius: '5',
                    pointHoverBackgroundColor: 'black',
                    borderWidth: '1',
                    data: [,50,50,50,50,50,50,50,50,50,50,50,50,50,50],
                    pointStyle: 'rectRot',
                    },
                    {
                    label: 'Aspirin',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    borderColor: 'rgba(0,0,0,0)',
                    pointBorderColor: "#2350DF",
                    // pointBorderWidth: '1',
                    pointBackgroundColor: "#2350DF",
                    pointRadius: '4',
                    pointHoverRadius: '5',
                    pointHoverBackgroundColor: 'black',
                    borderWidth: '1',
                    data: [,30,30,30,30,30,30,30,30,30,30,30,30,30,30],
                    // pointStyle: 'rectRounded',
                    pointHoverBorderWidth: '2',
                    pointStyle: 'rectRot',
                    },
                    ]
                    },
                    // Configuration options go here
                    options: {
                    responsive:true,
                    maintainAspectRatio: false,
                    legend: {display: false},
                    scales: {
                    xAxes: [{
                    gridLines: {
                    display: false,
                    drawBorder: false,
                    },
                    ticks:{display:false}
                    }],
                    yAxes: [{
                    gridLines: {
                    display: false,
                    drawBorder:false,
                    },
                    ticks:{display:false}
                    }]
                    },
                    layout: {
                    padding: {
                    left: 0,
                    right: 10,
                    top: 10,
                    bottom: 0
                    }
                    },
                    tooltips: {
                    displayColors: false,
                    caretSize: 5,
                    bodyFontSize: 11,
                    callbacks: {
                    title: function() {},
                    //Changes here!
                    label: function(tooltipItem, data) {
                    if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="#230DF"){
                    return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                    }
                    if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                    return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                    }
                    },
                    },
                    } }
                    });
                    //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                    // Diuretics Medication graph
                    script.
                      var ctx = document.getElementById('myDiureticsChart').getContext('2d');
                      var chart = new Chart(ctx, {
                      // The type of chart we want to create
                      type: 'line',
                      // The data for our dataset
                      data: {
                      labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019', ],
                      dataAcutal:["25","25","25","25", "25", "25", "25", "25", "40", "40", "40", "40", "40", "40", "40"],
                      datasets: [{
                      label: 'Hydrochlorothiazide',
                      backgroundColor: 'rgba(0, 0, 0, 0)',
                      borderColor: 'rgba(0,0,0,0)',
                      pointBorderColor: "#23AEDF",
                      // pointBorderWidth: '1',
                      pointBackgroundColor: "#23AEDF",
                      pointRadius: '4',
                      pointHoverRadius: '5',
                      pointHoverBackgroundColor: 'black',
                      borderWidth: '1',
                      data: [30,30,30,30,30,30,30,30,30,,,,,,],
                      pointHoverBorderWidth: '2',
                      pointStyle: 'rectRot',
                      },
                      {
                      label: 'Furosemide',
                      backgroundColor: 'rgba(0, 0, 0, 0)',
                      borderColor: 'rgba(0,0,0,0)',
                      pointBorderColor: "#23AEDF",
                      // pointBorderWidth: '1',
                      pointBackgroundColor: "#23AEDF",
                      pointRadius: '4',
                      pointHoverRadius: '5',
                      pointHoverBackgroundColor: 'black',
                      borderWidth: '1',
                      data: [,,,,,,,,,30,30,30,30,30,30],
                      pointStyle: 'rect',
                      pointHoverBorderWidth: '2',
                      }
                      ]
                      },
                      // Configuration options go here
                      options: {
                      responsive:true,
                      maintainAspectRatio: false,
                      legend: {display: false},
                      scales: {
                      xAxes: [{
                      gridLines: {
                      display: false,
                      drawBorder: false,
                      },
                      ticks:{display:false}
                      }],
                      yAxes: [{
                      gridLines: {
                      display: false,
                      drawBorder:false,
                      },
                      ticks:{display:false}
                      }]
                      },
                      layout: {
                      padding: {
                      left: 0,
                      right: 10,
                      top: 10,
                      bottom: 0
                      }
                      },
                      tooltips: {
                      displayColors: false,
                      caretSize: 5,
                      bodyFontSize: 11,
                      callbacks: {
                      title: function() {},
                      //Changes here!
                      label: function(tooltipItem, data) {
                      if(data.labels[tooltipItem.index]=="N/A"){
                      return "Period Not Covered";
                      }
                      if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="green"){
                      return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                      }
                      if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                      return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                      }
                      if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                      return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                      }
                      },
                      },
                      } }
                      });
                      //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                      // ANTI-Thrombotic Medication graph
                      script.
                        var ctx = document.getElementById('myAntiThromboticChart').getContext('2d');
                        var chart = new Chart(ctx, {
                        // The type of chart we want to create
                        type: 'line',
                        // The data for our dataset
                        data: {
                        labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019'],
                        dataAcutal:["12.5","12.5","12.5","12.5", "12.5", "25", "25", "25", "300", "300", "200", "200", "200", "100", "100", "100", "100"],
                        datasets: [{
                        label: 'Pravastatin',
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        // pointBorderWidth: '1',
                        borderColor: 'rgba(0,0,0,0)',
                        pointBackgroundColor: 'black',
                        pointRadius: '4',
                        pointHoverRadius: '5',
                        pointHoverBackgroundColor: 'black',
                        borderWidth: '1',
                        pointStyle: 'rectRot',
                        data: [10,10,10,10,1,1,1,1,1,1,1,1,1,1,1]
                        },
                        {
                        label: 'Clopidogrel',
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        borderColor: 'rgba(0,0,0,0)',
                        pointBorderColor: "#23AEDF",
                        pointBorderWidth: '1',
                        pointBackgroundColor: "#23AEDF",
                        pointRadius: '4',
                        pointHoverRadius: '5',
                        pointHoverBackgroundColor: 'black',
                        borderWidth: '1',
                        pointStyle: 'rectRot',
                        data: [,50,50,50,50,50,50,50,50,50,50,50,50,50,50],
                        },
                        {
                        label: 'Aspirin',
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        borderColor: 'rgba(0,0,0,0)',
                        pointBorderColor: "#2350DF",
                        // pointBorderWidth: '1',
                        pointBackgroundColor: "#2350DF",
                        pointRadius: '4',
                        pointHoverRadius: '5',
                        pointHoverBackgroundColor: 'black',
                        borderWidth: '1',
                        data: [,30,30,30,30,30,30,30,30,30,30,30,30,30,30],
                        pointStyle: 'rectRot',
                        pointHoverBorderWidth: '2',
                        },
                        ]
                        },
                        // Configuration options go here
                        options: {
                        responsive:true,
                        maintainAspectRatio: false,
                        legend: {display: false},
                        scales: {
                        xAxes: [{
                        gridLines: {
                        display: false,
                        drawBorder: false,
                        },
                        ticks:{display:false}
                        }],
                        yAxes: [{
                        gridLines: {
                        display: false,
                        drawBorder:false,
                        },
                        ticks:{display:false}
                        }]
                        },
                        layout: {
                        padding: {
                        left: 0,
                        right: 10,
                        top: 10,
                        bottom: 0
                        }
                        },
                        tooltips: {
                        displayColors: false,
                        caretSize: 5,
                        bodyFontSize: 11,
                        callbacks: {
                        title: function() {},
                        //Changes here!
                        label: function(tooltipItem, data) {
                        if(data.labels[tooltipItem.index]=="N/A"){
                        return "Period Not Covered";
                        }
                        if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="grey"){
                        return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                        }
                        if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                        return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                        }
                        if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                        return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                        }
                        },
                        },
                        } }
                        });
                        //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                        // ANTI-Thrombotic Medication graph 2
                        script.
                          var ctx = document.getElementById('myAntiThromboticChart2').getContext('2d');
                          var chart = new Chart(ctx, {
                          // The type of chart we want to create
                          type: 'line',
                          // The data for our dataset
                          data: {
                          labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019'],
                          dataAcutal:["12.5","12.5","12.5","12.5", "12.5", "25", "25", "25", "300", "300", "200", "200", "200", "100", "100", "100", "100"],
                          datasets: [{
                          label: 'Pravastatin',
                          backgroundColor: 'rgba(0, 0, 0, 0)',
                          // pointBorderWidth: '1',
                          borderColor: 'rgba(0,0,0,0)',
                          pointBackgroundColor: 'black',
                          pointRadius: '4',
                          pointHoverRadius: '5',
                          pointHoverBackgroundColor: 'black',
                          borderWidth: '1',
                          pointStyle: 'rectRot',
                          data: [10,10,10,10,1,1,1,1,1,1,1,1,1,1,1]
                          },
                          {
                          label: 'Clopidogrel',
                          backgroundColor: 'rgba(0, 0, 0, 0)',
                          borderColor: 'rgba(0,0,0,0)',
                          pointBorderColor: "#23AEDF",
                          pointBorderWidth: '1',
                          pointBackgroundColor: "#23AEDF",
                          pointRadius: '4',
                          pointHoverRadius: '5',
                          pointHoverBackgroundColor: 'black',
                          borderWidth: '1',
                          pointStyle: 'rectRot',
                          data: [,50,50,50,50,50,50,50,50,50,50,50,50,50,50],
                          },
                          {
                          label: 'Aspirin',
                          backgroundColor: 'rgba(0, 0, 0, 0)',
                          borderColor: 'rgba(0,0,0,0)',
                          pointBorderColor: "#2350DF",
                          // pointBorderWidth: '1',
                          pointBackgroundColor: "#2350DF",
                          pointRadius: '4',
                          pointHoverRadius: '5',
                          pointHoverBackgroundColor: 'black',
                          borderWidth: '1',
                          data: [,30,30,30,30,30,30,30,30,30,30,30,30,30,30],
                          pointStyle: 'rectRot',
                          pointHoverBorderWidth: '2',
                          },
                          ]
                          },
                          // Configuration options go here
                          options: {
                          responsive:true,
                          maintainAspectRatio: false,
                          legend: {display: false},
                          scales: {
                          xAxes: [{
                          gridLines: {
                          display: false,
                          drawBorder: false,
                          },
                          ticks:{display:false}
                          }],
                          yAxes: [{
                          gridLines: {
                          display: false,
                          drawBorder:false,
                          },
                          ticks:{display:false}
                          }]
                          },
                          layout: {
                          padding: {
                          left: 0,
                          right: 10,
                          top: 10,
                          bottom: 0
                          }
                          },
                          tooltips: {
                          displayColors: false,
                          caretSize: 5,
                          bodyFontSize: 11,
                          callbacks: {
                          title: function() {},
                          //Changes here!
                          label: function(tooltipItem, data) {
                          if(data.labels[tooltipItem.index]=="N/A"){
                          return "Period Not Covered";
                          }
                          if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="grey"){
                          return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                          }
                          if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                          return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                          }
                          if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                          return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                          }
                          },
                          },
                          } }
                          });
                          //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                          // ANTI-Thrombotic Medication graph 3
                          script.
                            var ctx = document.getElementById('myAntiThromboticChart3').getContext('2d');
                            var chart = new Chart(ctx, {
                            // The type of chart we want to create
                            type: 'line',
                            // The data for our dataset
                            data: {
                            labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019'],
                            dataAcutal:["12.5","12.5","12.5","12.5", "12.5", "25", "25", "25", "300", "300", "200", "200", "200", "100", "100", "100", "100"],
                            datasets: [{
                            label: 'Pravastatin',
                            backgroundColor: 'rgba(0, 0, 0, 0)',
                            // pointBorderWidth: '1',
                            borderColor: 'rgba(0,0,0,0)',
                            pointBackgroundColor: 'black',
                            pointRadius: '4',
                            pointHoverRadius: '5',
                            pointHoverBackgroundColor: 'black',
                            borderWidth: '1',
                            pointStyle: 'rectRot',
                            data: [10,10,10,10,1,1,1,1,1,1,1,1,1,1,1]
                            },
                            {
                            label: 'Clopidogrel',
                            backgroundColor: 'rgba(0, 0, 0, 0)',
                            borderColor: 'rgba(0,0,0,0)',
                            pointBorderColor: "#23AEDF",
                            pointBorderWidth: '1',
                            pointBackgroundColor: "#23AEDF",
                            pointRadius: '4',
                            pointHoverRadius: '5',
                            pointHoverBackgroundColor: 'black',
                            borderWidth: '1',
                            pointStyle: 'rectRot',
                            data: [,50,50,50,50,50,50,50,50,50,50,50,50,50,50],
                            },
                            {
                            label: 'Aspirin',
                            backgroundColor: 'rgba(0, 0, 0, 0)',
                            borderColor: 'rgba(0,0,0,0)',
                            pointBorderColor: "#2350DF",
                            // pointBorderWidth: '1',
                            pointBackgroundColor: "#2350DF",
                            pointRadius: '4',
                            pointHoverRadius: '5',
                            pointHoverBackgroundColor: 'black',
                            borderWidth: '1',
                            data: [,30,30,30,30,30,30,30,30,30,30,30,30,30,30],
                            pointStyle: 'rectRot',
                            pointHoverBorderWidth: '2',
                            },
                            ]
                            },
                            // Configuration options go here
                            options: {
                            responsive:true,
                            maintainAspectRatio: false,
                            legend: {display: false},
                            scales: {
                            xAxes: [{
                            gridLines: {
                            display: false,
                            drawBorder: false,
                            },
                            ticks:{display:false}
                            }],
                            yAxes: [{
                            gridLines: {
                            display: false,
                            drawBorder:false,
                            },
                            ticks:{display:false}
                            }]
                            },
                            layout: {
                            padding: {
                            left: 0,
                            right: 10,
                            top: 10,
                            bottom: 0
                            }
                            },
                            tooltips: {
                            displayColors: false,
                            caretSize: 5,
                            bodyFontSize: 11,
                            callbacks: {
                            title: function() {},
                            //Changes here!
                            label: function(tooltipItem, data) {
                            if(data.labels[tooltipItem.index]=="N/A"){
                            return "Period Not Covered";
                            }
                            if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="grey"){
                            return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                            }
                            if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                            return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                            }
                            if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                            return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                            }
                            },
                            },
                            } }
                            });
                            //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                            // ANTI-Thrombotic Medication graph4
                            script.
                              var ctx = document.getElementById('myAntiThromboticChart4').getContext('2d');
                              var chart = new Chart(ctx, {
                              // The type of chart we want to create
                              type: 'line',
                              // The data for our dataset
                              data: {
                              labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019'],
                              dataAcutal:["12.5","12.5","12.5","12.5", "12.5", "25", "25", "25", "300", "300", "200", "200", "200", "100", "100", "100", "100"],
                              datasets: [{
                              label: 'Pravastatin',
                              backgroundColor: 'rgba(0, 0, 0, 0)',
                              // pointBorderWidth: '1',
                              borderColor: 'rgba(0,0,0,0)',
                              pointBackgroundColor: 'black',
                              pointRadius: '4',
                              pointHoverRadius: '5',
                              pointHoverBackgroundColor: 'black',
                              borderWidth: '1',
                              pointStyle: 'rectRot',
                              data: [10,10,10,10,1,1,1,1,1,1,1,1,1,1,1]
                              },
                              {
                              label: 'Clopidogrel',
                              backgroundColor: 'rgba(0, 0, 0, 0)',
                              borderColor: 'rgba(0,0,0,0)',
                              pointBorderColor: "#23AEDF",
                              pointBorderWidth: '1',
                              pointBackgroundColor: "#23AEDF",
                              pointRadius: '4',
                              pointHoverRadius: '5',
                              pointHoverBackgroundColor: 'black',
                              borderWidth: '1',
                              pointStyle: 'rectRot',
                              data: [,50,50,50,50,50,50,50,50,50,50,50,50,50,50],
                              },
                              {
                              label: 'Aspirin',
                              backgroundColor: 'rgba(0, 0, 0, 0)',
                              borderColor: 'rgba(0,0,0,0)',
                              pointBorderColor: "#2350DF",
                              // pointBorderWidth: '1',
                              pointBackgroundColor: "#2350DF",
                              pointRadius: '4',
                              pointHoverRadius: '5',
                              pointHoverBackgroundColor: 'black',
                              borderWidth: '1',
                              data: [,30,30,30,30,30,30,30,30,30,30,30,30,30,30],
                              pointStyle: 'rectRot',
                              pointHoverBorderWidth: '2',
                              },
                              ]
                              },
                              // Configuration options go here
                              options: {
                              responsive:true,
                              maintainAspectRatio: false,
                              legend: {display: false},
                              scales: {
                              xAxes: [{
                              gridLines: {
                              display: false,
                              drawBorder: false,
                              },
                              ticks:{display:false}
                              }],
                              yAxes: [{
                              gridLines: {
                              display: false,
                              drawBorder:false,
                              },
                              ticks:{display:false}
                              }]
                              },
                              layout: {
                              padding: {
                              left: 0,
                              right: 10,
                              top: 10,
                              bottom: 0
                              }
                              },
                              tooltips: {
                              displayColors: false,
                              caretSize: 5,
                              bodyFontSize: 11,
                              callbacks: {
                              title: function() {},
                              //Changes here!
                              label: function(tooltipItem, data) {
                              if(data.labels[tooltipItem.index]=="N/A"){
                              return "Period Not Covered";
                              }
                              if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="grey"){
                              return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                              }
                              if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                              return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                              }
                              if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                              return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                              }
                              },
                              },
                              } }
                              });
                              //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                              // ANTI-Thrombotic Medication graph 5
                              script.
                                var ctx = document.getElementById('myAntiThromboticChart5').getContext('2d');
                                var chart = new Chart(ctx, {
                                // The type of chart we want to create
                                type: 'line',
                                // The data for our dataset
                                data: {
                                labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019'],
                                dataAcutal:["12.5","12.5","12.5","12.5", "12.5", "25", "25", "25", "300", "300", "200", "200", "200", "100", "100", "100", "100"],
                                datasets: [{
                                label: 'Pravastatin',
                                backgroundColor: 'rgba(0, 0, 0, 0)',
                                // pointBorderWidth: '1',
                                borderColor: 'rgba(0,0,0,0)',
                                pointBackgroundColor: 'black',
                                pointRadius: '4',
                                pointHoverRadius: '5',
                                pointHoverBackgroundColor: 'black',
                                borderWidth: '1',
                                pointStyle: 'rectRot',
                                data: [10,10,10,10,1,1,1,1,1,1,1,1,1,1,1]
                                },
                                {
                                label: 'Clopidogrel',
                                backgroundColor: 'rgba(0, 0, 0, 0)',
                                borderColor: 'rgba(0,0,0,0)',
                                pointBorderColor: "#23AEDF",
                                pointBorderWidth: '1',
                                pointBackgroundColor: "#23AEDF",
                                pointRadius: '4',
                                pointHoverRadius: '5',
                                pointHoverBackgroundColor: 'black',
                                borderWidth: '1',
                                pointStyle: 'rectRot',
                                data: [,50,50,50,50,50,50,50,50,50,50,50,50,50,50],
                                },
                                {
                                label: 'Aspirin',
                                backgroundColor: 'rgba(0, 0, 0, 0)',
                                borderColor: 'rgba(0,0,0,0)',
                                pointBorderColor: "#2350DF",
                                // pointBorderWidth: '1',
                                pointBackgroundColor: "#2350DF",
                                pointRadius: '4',
                                pointHoverRadius: '5',
                                pointHoverBackgroundColor: 'black',
                                borderWidth: '1',
                                data: [,30,30,30,30,30,30,30,30,30,30,30,30,30,30],
                                pointStyle: 'rectRot',
                                pointHoverBorderWidth: '2',
                                },
                                ]
                                },
                                // Configuration options go here
                                options: {
                                responsive:true,
                                maintainAspectRatio: false,
                                legend: {display: false},
                                scales: {
                                xAxes: [{
                                gridLines: {
                                display: false,
                                drawBorder: false,
                                },
                                ticks:{display:false}
                                }],
                                yAxes: [{
                                gridLines: {
                                display: false,
                                drawBorder:false,
                                },
                                ticks:{display:false}
                                }]
                                },
                                layout: {
                                padding: {
                                left: 0,
                                right: 10,
                                top: 10,
                                bottom: 0
                                }
                                },
                                tooltips: {
                                displayColors: false,
                                caretSize: 5,
                                bodyFontSize: 11,
                                callbacks: {
                                title: function() {},
                                //Changes here!
                                label: function(tooltipItem, data) {
                                if(data.labels[tooltipItem.index]=="N/A"){
                                return "Period Not Covered";
                                }
                                if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="grey"){
                                return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                                }
                                if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                                return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                                }
                                if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                                return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                                }
                                },
                                },
                                } }
                                });
                                //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                                // ANTIDIABETIC Medication graph
                                script.
                                  var ctx = document.getElementById('myAntiDiabeticChart').getContext('2d');
                                  var chart = new Chart(ctx, {
                                  // The type of chart we want to create
                                  type: 'line',
                                  // The data for our dataset
                                  data: {
                                  labels: ['07/2018', '08/2018', '09/2018', '10/2019', '11/2019', '01/2019', '02/2019', '03/2019', '04/2019', '05/2019', '06/2019', '07/2019', '08/2019', '09/2019', ],
                                  dataAcutal:["25","25","25","25", "25", "25", "25", "25", "40", "40", "40", "40", "40", "40", "40"],
                                  datasets: [{
                                  label: 'Metformin',
                                  backgroundColor: 'rgba(0, 0, 0, 0)',
                                  borderColor: 'rgba(0,0,0,0)',
                                  pointBorderColor: "#2350DF",
                                  // pointBorderWidth: '1',
                                  pointBackgroundColor: "#2350DF",
                                  pointRadius: '4',
                                  pointHoverRadius: '5',
                                  pointHoverBackgroundColor: 'black',
                                  borderWidth: '1',
                                  data: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                  pointHoverBorderWidth: '2',
                                  pointStyle: 'rectRot',
                                  },
                                  {
                                  label: 'Glipizide',
                                  backgroundColor: 'rgba(0, 0, 0, 0)',
                                  borderColor: 'rgba(0,0,0,0)',
                                  pointBorderColor: "#23AEDF",
                                  // pointBorderWidth: '1',
                                  pointBackgroundColor: "#23AEDF",
                                  pointRadius: '4',
                                  pointHoverRadius: '5',
                                  pointHoverBackgroundColor: 'black',
                                  borderWidth: '1',
                                  data: [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
                                  pointHoverBorderWidth: '2',
                                  pointStyle: 'rectRot',
                                  }
                                  ]
                                  },
                                  // Configuration options go here
                                  options: {
                                  responsive:true,
                                  maintainAspectRatio: false,
                                  legend: {display: false},
                                  scales: {
                                  xAxes: [{
                                  gridLines: {
                                  display: false,
                                  drawBorder: false,
                                  },
                                  ticks:{display:false}
                                  }],
                                  yAxes: [{
                                  gridLines: {
                                  display: false,
                                  drawBorder:false,
                                  },
                                  ticks:{display:false}
                                  }]
                                  },
                                  layout: {
                                  padding: {
                                  left: 0,
                                  right: 10,
                                  top: 10,
                                  bottom: 0
                                  }
                                  },
                                  tooltips: {
                                  displayColors: false,
                                  caretSize: 5,
                                  bodyFontSize: 11,
                                  callbacks: {
                                  title: function() {},
                                  //Changes here!
                                  label: function(tooltipItem, data) {
                                  if(data.labels[tooltipItem.index]=="N/A"){
                                  return "Period Not Covered";
                                  }
                                  if(data.datasets[tooltipItem.datasetIndex].pointBackgroundColor=="green"){
                                  return data.datasets[0].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                                  }
                                  if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="blue"){
                                  return data.datasets[2].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Filled' + ' '+  data.labels[tooltipItem.index];
                                  }
                                  if(data.datasets[tooltipItem.datasetIndex].pointBorderColor=="gray"){
                                  return data.datasets[3].label+ " " + data.dataAcutal[tooltipItem.index]+ 'mg'+ ', '+ 'Once Daily' + ', ' + 'Anticipated' + ' '+  data.labels[tooltipItem.index];
                                  }
                                  },
                                  },
                                  } }
                                  });
                                  //data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
                                  // IHIE TAB BUTTON
                                  script.
                                    function myIHIEFunction() {
                                    window.open("popup3.html", "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=0,width=750,height=500");
                                    }
                                  // JAVASCRIPT
                                  // sign modal
                                  script.
                                    // Get the modal
                                    var signmodal = document.getElementById("mySignModal");
                                    // Get the button that opens the modal
                                    var signbtn = document.getElementById("mysignBtn");
                                    // Get the <span> element that closes the modal
                                    var signspan = document.getElementsByClassName("signclose")[0];
                                    // When the user clicks on the button, open the modal
                                    signbtn.onclick = function() {
                                    signmodal.style.display = "block";
                                    }
                                    // When the user clicks on <span> (x), close the modal
                                    signspan.onclick = function() {
                                    signmodal.style.display = "none";
                                    }
                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                    if (event.target == signmodal) {
                                    signmodal.style.display = "none";
                                    }
                                    }
                                  // Auto Check addressed checkbox
                                  script(type='text/javascript').
                                    function changeToChecked(val, elt){
                                    if(val){
                                    elt.checked= true;
                                    }
                                    }
                                    function onFocusTextArea(val, elt){
                                    elt.checked = false;
                                    }
                                    function onBlurTextArea(val, elt){
                                    if(elt.value!=""){
                                    elt.checked = true;
                                    }
                                    }
                                  // order pop up and buttons
                                  // order pop up and buttons
                                  script.
                                    // When the user clicks on <div>, open the popup
                                    /* CHANGES HERE!! */
                                    function myOrderFunction(popup, btn) {
                                    // var popup = document.getElementById("myPopup2");
                                    // popup.classList.fadetoggle("show");
                                    //var popup = document.getElementById("myPopup");
                                    popup.classList.toggle("show");
                                    var s = popup.style;
                                    s.opacity = 1;
                                    (function fade(){(s.opacity-=.01)<0?s.visibility="hidden":setTimeout(fade,20)})();
                                    btn.disabled = true;
                                    var OrdertoTable = document.getElementById("OrderTable");
                                    let currentdate = new Date();
                                    let TimeNow = (currentdate.getMonth()+1) + "-" + currentdate.getDate() + "-" + currentdate.getFullYear();
                                    var row = OrdertoTable.insertRow(1);
                                    var cell1 = row.insertCell(0);
                                    var cell2 = row.insertCell(1);
                                    var cell3 = row.insertCell(2);
                                    var cell4 = row.insertCell(3);
                                    var cell5 = row.insertCell(4);
                                    cell1.innerHTML= "Stress Echocardiogram";
                                    cell2.innerHTML= "Pending";
                                    cell3.innerHTML= TimeNow;
                                    cell4.innerHTML="Routine"
                                    cell5.innerHTML="<button class='deleteEdit raise'><i class='fas fa-trash-alt'></i></button><button class='deleteEdit raise'><i class='fas fa-pen'></i></button>";
                                    }
                                    $('.orderbtn').click(function(){
                                    $('.addedOrders').addClass('shown');
                                    });
                                    function myOrderFunctionPod(popup, btn) {
                                    // var popup = document.getElementById("myPopup2");
                                    // popup.classList.fadetoggle("show");
                                    //var popup = document.getElementById("myPopup");
                                    popup.classList.toggle("show");
                                    var s = popup.style;
                                    s.opacity = 1;
                                    (function fade(){(s.opacity-=.01)<0?s.visibility="hidden":setTimeout(fade,20)})();
                                    btn.disabled = true;
                                    var OrdertoTable = document.getElementById("OrderTable");
                                    let currentdate = new Date();
                                    let TimeNow = (currentdate.getMonth()+1) + "-" + currentdate.getDate() + "-" + currentdate.getFullYear();
                                    var row = OrdertoTable.insertRow(1);
                                    var cell1 = row.insertCell(0);
                                    var cell2 = row.insertCell(1);
                                    var cell3 = row.insertCell(2);
                                    var cell4 = row.insertCell(3);
                                    var cell5 = row.insertCell(4);
                                    cell1.innerHTML= "Stress Echo";
                                    cell2.innerHTML= "Pending";
                                    cell3.innerHTML= TimeNow;
                                    cell4.innerHTML="Routine"
                                    cell5.innerHTML="<button class='deleteEdit raise'><i class='fas fa-trash-alt'></i></button><button class='deleteEdit raise'><i class='fas fa-pen'></i></button>";
                                    }
                                    $('.orderbtn').click(function(){
                                    $('.addedOrders').addClass('shown');
                                    });
                                  script.
                                    /* CHANGES HERE! */
                                    function myOrderFunction2() {
                                    // var popup = document.getElementById("myPopup2");
                                    // popup.classList.fadetoggle("show");
                                    var popup = document.getElementById("myPopup2");
                                    popup.classList.toggle("show");
                                    var s = document.getElementById('myPopup2').style;
                                    s.opacity = 1;
                                    (function fade(){(s.opacity-=.01)<0?s.display="none":setTimeout(fade,20)})();
                                    var btn = document.getElementById("orderDisable2").disabled = true;
                                    var OrdertoTable = document.getElementById("OrderTable");
                                    let currentdate = new Date();
                                    let TimeNow = (currentdate.getMonth()+1) + "-" + currentdate.getDate() + "-" + currentdate.getFullYear();
                                    var row = OrdertoTable.insertRow(1);
                                    var cell1 = row.insertCell(0);
                                    var cell2 = row.insertCell(1);
                                    var cell3 = row.insertCell(2);
                                    var cell4 = row.insertCell(3);
                                    var cell5 = row.insertCell(4);
                                    cell1.innerHTML= "NT-proBNP";
                                    cell2.innerHTML= "Pending";
                                    cell3.innerHTML= TimeNow;
                                    cell4.innerHTML="Routine"
                                    cell5.innerHTML="<button class='deleteEdit raise'><i class='fas fa-trash-alt'></i></button><button class='deleteEdit raise'><i class='fas fa-pen'></i></button>";
                                    }
                                    $('.orderbtn2').click(function(){
                                    $('.addedOrders').addClass('shown2');
                                    });
                                  // Image Modal 1
                                  script.
                                    // Get the modal
                                    var modal = document.getElementById("myModal");
                                    // Get the image and insert it inside the modal - use its "alt" text as a caption
                                    var img = document.getElementById("myImg");
                                    var modalImg = document.getElementById("img01");
                                    var captionText = document.getElementById("caption");
                                    img.onclick = function(){
                                    modal.style.display = "block";
                                    modalImg.src = this.src;
                                    captionText.innerHTML = this.alt;
                                    }
                                    // Get the <span> element that closes the modal
                                    var span = document.getElementsByClassName("close")[0];
                                    // When the user clicks on <span> (x), close the modal
                                    span.onclick = function() {
                                    modal.style.display = "none";
                                    }
                                  // Image Modal 2
                                  script.
                                    // Get the modal
                                    var modal = document.getElementById("myModal");
                                    // Get the image and insert it inside the modal - use its "alt" text as a caption
                                    var img = document.getElementById("myImg2");
                                    var modalImg = document.getElementById("img01");
                                    var captionText = document.getElementById("caption");
                                    img.onclick = function(){
                                    modal.style.display = "block";
                                    modalImg.src = this.src;
                                    captionText.innerHTML = this.alt;
                                    }
                                    // Get the <span> element that closes the modal
                                    var span = document.getElementsByClassName("close")[0];
                                    // When the user clicks on <span> (x), close the modal
                                    span.onclick = function() {
                                    modal.style.display = "none";
                                    }
                                  // On click accordion open for problems
                                  script.
                                    var acc = document.getElementsByClassName("accordion");
                                    var i;
                                    for (i = 0; i < acc.length; i++) {
                                    acc[i].addEventListener("click", function() {
                                    this.classList.toggle("active");
                                    var panel = this.nextElementSibling;
                                    if (panel.style.display === "block") {
                                    panel.style.display = "none";
                                    } else {
                                    panel.style.display = "block";
                                    }
                                    });
                                    }
                                  // Data inside the cardiologist notes
                                  script.
                                    PatientHere= [
                                    {"date":"10/14/16", "note1":"The patient reports that she had an echocardiogram done in the office of Dr. Sample Doctor4 and was told that she had a massive heart attack in the past. I have not had the opportunity to review any investigative data like chest x-ray, echocardiogram, EKG, etc. So, I advised her to have a chest x-ray and an EKG done before her next appointment, and we will try to get hold of the echocardiogram on her from the office of Dr. Sample Doctor4. In \\n the meantime, she is doing quite well, and she was advised to continue her current medication and return to the office in three months for followup.",
                                    //New notes
                                    "note2":"The patient is a 78-year-old female with the problem of essential hypertension. She has symptoms that suggested intracranial pathology, but so far work-up has been negative.She is taking hydrochlorothiazide 25-mg once a day and K-Dur 10-mEq once a day with adequate control of her blood pressure. She denies any chest pain, shortness of breath, PND, ankle swelling, or dizziness.",
                                    "note3": "Heart rate is 80 and blood pressure is 130/70. Head and neck are unremarkable. Heart sounds are normal. Abdomen is benign. Extremities are without edema. The patient reports that she had an echocardiogram done in the office of Dr. Sample Doctor4 and was told that she had a massive heart attack in the past. I have not had the opportunity to review any investigative data like chest x-ray, echocardiogram, EKG, etc. So, I advised her to have a chest x-ray and an EKG \\n done before her next appointment, and we will try to get hold of the echocardiogram on her from the office of Dr. Sample Doctor4. In the meantime, she is doing quite well, and she was advised to continue her current medication and return to the office in three months for followup."},
                                    {"date": "09/26/14", "note1":"Mitral regurgitation, status post mitral valve repair. Underlying preserved systolic function with recurrent atypical chest pain for angina pectoris Anxiety. Hypertension.Continue current medical regimen. Encouraged to remain physically active. No need for further cardiac workup. Return in six to nine months.", //new notes
                                    "note2":"The patient is an (XX)-year-old female known to us because of a history of mitral regurgitation and atrial fibrillation, status post mitral valve repair, history of diabetes, asthma, and recurrent chest discomfort with negative cardiac workup for coronary artery disease, who returned in followup visit. The patient was seen by us last year, and at that time, we felt that she was doing quite well from the cardiac standpoint and recommended the same medication and no further\\n cardiac evaluation. Since then, the patient has continued to experience occasional chest discomfort, but this time, the chest discomfort has been only lasting a few minutes. She has learned how to pace herself and even the dyspnea on exertion is much improved. In the office, she is quite pleasant, without distress, and no new symptoms. She also denied any recent hospitalization for cardiac-related issues. Current medications included CellCept 500 mg daily, Lasix 40 mg daily, potassium chloride \n 10 mEq daily, atenolol 50 mg daily, Singulair 10 mg daily, Coumadin, Lipitor 40 mg daily, and Zyrtec 10 mg daily. She is married and lives with her husband. No smoking. No alcohol.",
                                    "note3":"Blood pressure 104/72 with a pulse rate of 70 and weight of 140 pounds. HEENT/Neck: There is no JVD. There is a 2+ carotid. We do not appreciate a bruit. The lungs have reduced breath sounds, but they are clear to auscultation and percussion. Heart reveals irregularly irregular rhythm. S1 is slightly accentuated. The S2 is single. We do not appreciate a significant mitral regurgitation. No S3 or LV heave. The abdomen is soft, nontender, and nondistended. Extremities showed trace peripheral edema. There is no clubbing or cyanosis."},
                                    {"date": "08/12/13", "note1":"Coronary artery disease, status post coronary artery bypass graft. Preserved systolic function. Hypertension. Anxiety.Continue current medical regimen. Encouraged to increase physical activity. No need for further cardiac workup.",
                                    "note2":"The patient is known to us because of a history of coronary artery disease and a CABG back in October, who returns for a followup visit. The patient was seen by us last in October of last year, and at that time, we felt he was doing quite well from the cardiac standpoint. We did repeat her lipid profile at that time, and total cholesterol was 160 with HDL of 68, LDL of 78, and triglycerides of 74. ALT showed normal value. The patient continued to report an excellent functional capacity. She does walk almost on a daily basis weather permitting. She denies any hospitalization for cardiac-related symptoms. No new symptoms. In particular, she denies any chest pain, PND, orthopnea, or peripheral edema. Current medications include lisinopril 5 mg every evening, amlodipine 5 mg every day, hydrochlorothiazide 12.5 mg daily, aspirin 325 mg daily, simvastatin 80 mg daily, metoprolol 50 mg p.o. b.i.d., omeprazole 20 mg as needed, and multivitamin.", "note3":"Blood pressure is 112/72 with a pulse rate of 78 and weight of 190 pounds. HEENT/Neck: There is no JVD, 2+ carotids. We do not appreciate a bruit. The lungs are clear to auscultation and percussion. Heart reveals a regular rate and rhythm with a normal S1 and S2. We cannot rule out soft S4. There is a faint systolic ejection murmur. The abdomen is distended but soft, nontender, and overall benign. The extremities show no peripheral edema. Neurological examination is grossly nonfocal."}
                                    ];
                                    populateData(PatientHere);
                                    function populateData(array) {
                                    var cardionotesDates= document.getElementById("cardionotes-dates");
                                    for(var i=0; i<PatientHere.length; i++){
                                    let dateLink= document.createElement("button");
                                    let displayNotes1= PatientHere[i].note1;
                                    let displayNotes2= PatientHere[i].note2;
                                    let displayNotes3 =PatientHere[i].note3;
                                    dateLink.innerHTML= PatientHere[i].date;
                                    cardionotesDates.appendChild(dateLink);
                                    }
                                    //Changes the note
                                    function DisplayChange(displayNotes1, displayNotes2, displayNotes3, i){
                                    document.getElementById("CardioChange1").innerHTML= displayNotes1;
                                    document.getElementById("CardioChange2").innerHTML= displayNotes2;
                                    document.getElementById("CardioChange3").innerHTML= displayNotes3;
                                    }
                                    }
                                    //Signs all of the orders
                                    function SignAll() {
                                    var table= document.getElementById("OrderTable");
                                    //	if(table.row[1].cell[1].innerHTML=="Pending" && table.row[2].cell[1].innerHTML=="Pending"){
                                    var x= table.rows[1].cells;
                                    var y = table.rows[2].cells;
                                    if(x[1].innerHTML=="Pending"){
                                    x[1].innerHTML = "Ordered";
                                    // document.getElementsByClassName("OrderTab").style.fontcolor="grey";
                                    $('.signBtn').click(function(){
                                    $('.addedOrders').removeClass('shown2');
                                    });
                                    }
                                    if(y[1].innerHTML=="Pending"){
                                    y[1].innerHTML = "Ordered";
                                    }
                                    //	}``
                                    }
                                  // Dropdown upload button
                                  script.
                                    /* When the user clicks on the button,
                                    toggle between hiding and showing the dropdown content */
                                    function myDropdownFunction() {
                                    document.getElementById("myDropdown").classList.toggle("show");
                                    }
                                    // Close the dropdown if the user clicks outside of it
                                    window.onclick = function(event) {
                                    if (!event.target.matches('.dropbtn')) {
                                    var dropdowns = document.getElementsByClassName("dropdown-content");
                                    var i;
                                    for (i = 0; i < dropdowns.length; i++) {
                                    var openDropdown = dropdowns[i];
                                    if (openDropdown.classList.contains('show')) {
                                    openDropdown.classList.remove('show');
                                    }
                                    }
                                    }
                                    }
                                  // Tabs for left container
                                  script.
                                    function openTab(evt, tabName) {
                                    // Declare all variables
                                    var i, tabcontent, tablinks;
                                    // Get all elements with class="tabcontent" and hide them
                                    tabcontent = document.getElementsByClassName("tabcontent");
                                    for (i = 0; i < tabcontent.length; i++) {
                                    tabcontent[i].style.display = "none";
                                    }
                                    // Get all elements with class="tablinks" and remove the class "active"
                                    tablinks = document.getElementsByClassName("tablinks");
                                    for (i = 0; i < tablinks.length; i++) {
                                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                                    }
                                    // Show the current tab, and add an "active" class to the button that opened the tab
                                    document.getElementById(tabName).style.display = "block";
                                    evt.currentTarget.className += " active";
                                    }
                                  // Default Open Tab for left container
                                  script.
                                    // Get the element with id="defaultOpen" and click on it
                                    document.getElementById("defaultOpen").click();
                                  // Tabs for Right container
                                  script.
                                    function openTab2(evt, tabName) {
                                    // Declare all variables
                                    var i, tabcontent2, tablinks2;
                                    // Get all elements with class="tabcontent" and hide them
                                    tabcontent2 = document.getElementsByClassName("tabcontent2");
                                    for (i = 0; i < tabcontent2.length; i++) {
                                    tabcontent2[i].style.display = "none";
                                    }
                                    // Get all elements with class="tablinks" and remove the class "active"
                                    tablinks2 = document.getElementsByClassName("tablinks2");
                                    for (i = 0; i < tablinks2.length; i++) {
                                    tablinks2[i].className = tablinks2[i].className.replace(" active", "");
                                    }
                                    // Show the current tab, and add an "active" class to the button that opened the tab
                                    document.getElementById(tabName).style.display = "block";
                                    evt.currentTarget.className += " active";
                                    }
                                  // Default Open Tab for left container
                                  script.
                                    // Get the element with id="defaultOpen" and click on it
                                    document.getElementById("defaultOpen2").click();
                                  // Open more words in textboxes
                                  // textbox1
                                  script.
                                    function expandWordsFunction1(theDots, mores, btntext) {
                                    if (theDots.style.display == "none") {
                                    theDots.style.display = "inline";
                                    btntext.innerHTML = "<i class='fas fa-chevron-right'></i>";
                                    mores.style.display = "none";
                                    } else {
                                    theDots.style.display = "none";
                                    btntext.innerHTML = "<i class='fas fa-chevron-down'></i>";
                                    mores.style.display = "inline";
                                    mores.style.transform= "rotate(90deg)";
                                    }
                                    }
                                  // textbox2
                                  script.
                                    function expandWordsFunction2(dots, moreText, btnText) {
                                    if (dots.style.display == "none") {
                                    dots.style.display = "inline";
                                    btnText.innerHTML = "<i class='fas fa-chevron-right'></i>";
                                    moreText.style.display = "none";
                                    } else {
                                    dots.style.display = "none";
                                    btnText.innerHTML = "<i class='fas fa-chevron-down'></i>";
                                    moreText.style.display = "inline";
                                    moreText.style.transform= "rotate(90deg)";
                                    }
                                    }
                                  // textbox3
                                  script.
                                    function expandWordsFunction3(dots, moreText, btnText) {
                                    if (dots.style.display == "none") {
                                    dots.style.display = "inline";
                                    btnText.innerHTML = "<i class='fas fa-chevron-right'></i>";
                                    moreText.style.display = "none";
                                    } else {
                                    dots.style.display = "none";
                                    btnText.innerHTML = "<i class='fas fa-chevron-down'></i>";
                                    moreText.style.display = "inline";
                                    moreText.style.transform= "rotate(90deg)";
                                    }
                                    }
                                  script.
                                    //Responsiveness for buttons for viewing options
                                    function menuSmall() {
                                    var x = document.getElementById("butOptions");
                                    if (x.className === "optionBar") {
                                    x.className += " responsive";
                                    } else {
                                    x.className = "optionBar";
                                    }
                                    }
                                  script.
                                    //autofill searchbar
                                    new Def.Autocompleter.Search('icd10', 'https://clinicaltables.nlm.nih.gov/api/icd10cm/v3/search?sf=code,name&df=code,name',
                                    {tableFormat: true, valueCols: [0,1], colHeaders: ['Code', 'Name']});
                                    //console.log(Autocompleter[valueCols]);
